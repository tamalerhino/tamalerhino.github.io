<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://tamalerhino.github.io/</id><title>Tamalerhino's Blog</title><subtitle>Ulises Galeano's (@tamalerhino) personal blog</subtitle> <updated>2022-09-25T20:27:14-05:00</updated> <author> <name>Ulises Galeano</name> <uri>https://tamalerhino.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://tamalerhino.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://tamalerhino.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 Ulises Galeano </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Install Docker Air Gapped</title><link href="https://tamalerhino.github.io/posts/docker-debian-airgapped/" rel="alternate" type="text/html" title="Install Docker Air Gapped" /><published>2022-07-16T12:00:00-05:00</published> <updated>2022-09-25T20:21:39-05:00</updated> <id>https://tamalerhino.github.io/posts/docker-debian-airgapped/</id> <content src="https://tamalerhino.github.io/posts/docker-debian-airgapped/" /> <author> <name>Ulises Galeano</name> </author> <category term="Containerization" /> <summary> As part of a competition i am taking part of i needed the ability to run a simple self hosted wiki page on my Kali box. the fastest and best alternative was to run this as a container. Although i tried to export the image to run with systemd-namespaces i ran into many issues. So i decided to find a way to find a way to install docker air-gapped along with my wiki image. Getting the files In or... </summary> </entry> <entry><title>Container Image Pipeline With SBOM</title><link href="https://tamalerhino.github.io/posts/container-image-pipeline-with-sbom/" rel="alternate" type="text/html" title="Container Image Pipeline With SBOM" /><published>2022-03-12T11:00:00-06:00</published> <updated>2022-07-10T22:28:50-05:00</updated> <id>https://tamalerhino.github.io/posts/container-image-pipeline-with-sbom/</id> <content src="https://tamalerhino.github.io/posts/container-image-pipeline-with-sbom/" /> <author> <name>Ulises Galeano</name> </author> <category term="Containerization" /> <category term="DevSecOps" /> <summary> This is to go over a container image pipeline that will scan for vulnerabilities and generate a Software Bill of Materials at the end. Proposed Architecture graph TD A[Dev User Pushes Dockerfile to git repo] --&amp;gt;|git repo notifies Jenkins| B(Jenkins pulls down repo and kicks off job) --&amp;gt;|Pipeline Builds Docker Image| C(Dependencies are pulled from artifact management system) --&amp;gt;|T... </summary> </entry> <entry><title>Systemd Namespace Containers</title><link href="https://tamalerhino.github.io/posts/systemd-namespace-containers/" rel="alternate" type="text/html" title="Systemd Namespace Containers" /><published>2022-03-05T11:00:00-06:00</published> <updated>2022-09-25T20:21:39-05:00</updated> <id>https://tamalerhino.github.io/posts/systemd-namespace-containers/</id> <content src="https://tamalerhino.github.io/posts/systemd-namespace-containers/" /> <author> <name>Ulises Galeano</name> </author> <category term="Containerization" /> <summary> In my journey to demystify containers and get away from a product and run containers with nothing but my Linux laptop i decided that Containers From Scratch were great, but what if it was easier to manage your container once its created? It is! And you can do it all with nothing but systemd! Prerequisites Have machinectl installed. This package provides systemd tools for nspawn and container/V... </summary> </entry> <entry><title>Containers From Scratch Part 2</title><link href="https://tamalerhino.github.io/posts/container-from-scratch-pt2/" rel="alternate" type="text/html" title="Containers From Scratch Part 2" /><published>2022-02-12T11:00:00-06:00</published> <updated>2022-02-12T11:00:00-06:00</updated> <id>https://tamalerhino.github.io/posts/container-from-scratch-pt2/</id> <content src="https://tamalerhino.github.io/posts/container-from-scratch-pt2/" /> <author> <name>Ulises Galeano</name> </author> <category term="Containerization" /> <summary> In the first part we created a container in the simplest form, using namespaces, chroot, and a little pivot_root magic to isolate our service. But there is still much more to do… Further Isolation or limits (cgroups) cgroups, short for control groups, allow kernel-imposed isolation on resources like memory and CPU. This is so one container cant kill things in other containers by using up all t... </summary> </entry> <entry><title>Containers From Scratch Part 1</title><link href="https://tamalerhino.github.io/posts/container-from-scratch/" rel="alternate" type="text/html" title="Containers From Scratch Part 1" /><published>2022-02-11T11:00:00-06:00</published> <updated>2022-09-25T20:21:39-05:00</updated> <id>https://tamalerhino.github.io/posts/container-from-scratch/</id> <content src="https://tamalerhino.github.io/posts/container-from-scratch/" /> <author> <name>Ulises Galeano</name> </author> <category term="Containerization" /> <summary> At the end of the day, all a container is an isolated service with its dependencies, this document will go over how to create a container from scratch, using nothing but the built-in Linux kernel modules. How? As mentioned before, a container is nothing more than an isolated service running on the linux Kernel. How it does this is by using kernel level modules known as namespaces,cgroups and s... </summary> </entry> </feed>
